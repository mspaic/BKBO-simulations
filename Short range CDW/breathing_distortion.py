import multiprocessing
from javelin.mc import MC
from javelin.energies import SpringEnergy
from javelin.modifier import SetDisplacementNormalXYZ
import numpy as np
from pandas import read_csv
from javelin.structure import Structure
from custom.inout import write_structure

# path to the folder containing .csv files generated by Ising.cpp
input_path = "sim_"
supercell_size = 10
doping = 0.2
n_samples = 2
samples = []

# empirical doping dependence of the lattice constant
lu = 4.35 - 0.17*doping


"""
Loads structure file from a .csv file. 
Since javelin cannot work with different oxidation states of the same atom we represent Bi3+ and Bi5+ with Hg 
and Pt, respectively, because they have similar atomic form-factors at low Q.
"""


def read_input(size, doping, path):
    numbers = np.array([1, 2, 3, 4, 5]*size**3)
    # cubic perovskite basis
    pos = [(0, 0, 0), (0.5, 0, 0), (0, 0.5, 0), (0, 0, 0.5), (0.5, 0.5, 0.5)]
    # reading the structure
    structure = Structure(numbers=numbers, positions=pos*size**3, unitcell=lu)
    structure.atoms = read_csv(path)
    structure.reindex([size, size, size, 5])
    return structure


# Reading configurations created by Ising.outs
for i in range(n_samples):
    samples.append(read_input(supercell_size, doping, input_path+str(i)+".csv"))
samples[0].atoms



# MC simulation 
def breathing_distortion(structure=None):
    # empirical doping dependence of the lattice constant
    dop = 0.3
    latt = 4.35 - 0.17*dop

    temperature = 30       # Kelvin
    K = 19*11604*pow(latt, 2)  # 19 eV/A^2 -> Kelvin/l.u.^2

    d1 = 0.5 + 0.1/latt   # desired Bi3+-O distance
    d2 = 0.5 - 0.1/latt   # desired Bi5+-O distance

    n_cycles = 1000       # number of MC cycles
    sigma = 0.06          # standard deviation of proposed moves

    # neighbor lists
    OBi1 = structure.get_neighbors(1, 0)
    OBi2 = structure.get_neighbors(2, 0)
    OBi3 = structure.get_neighbors(3, 0)

    e_BiO_1 = SpringEnergy(K, d1, atom_type1=8, atom_type2=80)
    e_BiO_2 = SpringEnergy(K, d2, atom_type1=8, atom_type2=78)

    distortion = MC()
    distortion.add_modifier(SetDisplacementNormalXYZ(1, 0.5, sigma, 0, 0, 0, 0))
    distortion.add_target(OBi1, e_BiO_1)
    distortion.add_target(OBi1, e_BiO_2)

    distortion.add_modifier(SetDisplacementNormalXYZ(2, 0, 0, 0.5, sigma, 0, 0))
    distortion.add_target(OBi2, e_BiO_1)
    distortion.add_target(OBi2, e_BiO_2)

    distortion.add_modifier(SetDisplacementNormalXYZ(3, 0, 0, 0, 0, 0.5, sigma))
    distortion.add_target(OBi3, e_BiO_1)
    distortion.add_target(OBi3, e_BiO_2)

    distortion.cycles = n_cycles
    distortion.temperature = temperature
    structure = distortion.run(structure)
    return structure


# running the simulation
count = 0
# create a process pool that uses all cpus
with multiprocessing.Pool() as pool:
    # call the function for each item in parallel
    for result in pool.map(breathing_distortion, samples):
        write_structure(result, "structure_"+str(count)+".txt")
        count = count + 1

